, bins=50,
fill = 'white') +
geom_density() +
theme_minimal()
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(aes(y = ..density..),
bins=50,
color = 1,
fill = 'white') +
geom_density() +
theme_minimal()
samples <- rbinom(n = 1, p = 0.5)
samples <- rbinom(size = 1, p = 0.5)
samples <- rbinom(n = 1, size = 5000, p = 0.5)
samples
samples <- rbinom(n = 5000, size = 1, p = 0.5)
samples
samples <- rbinom(n = 5000, size = 1, p = 0.5) #5000 independent experiments with a single fair coin flip
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(aes(y = ..density..),
bins=50,
color = 1,
fill = 'white') +
geom_density() +
theme_minimal()
samples <- rbinom(n = 5000, size = 1, p = 0.5) #5000 independent experiments with a single fair coin flip
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(
bins=50,
color = 1,
fill = 'white') +
theme_minimal()
samples <- rbinom(n = 5000, size = 1, p = 0.5) #5000 independent experiments with a single fair coin flip
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(
bins=2,
color = 1,
fill = 'white') +
theme_minimal()
samples <- rbinom(n = 5000, size = 1, p = 0.5) #5000 independent experiments with a single fair coin flip
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(
bins=50,
color = 1,
fill = 'white') +
theme_minimal()
set.seed(333)
library(ggplot2)
samples <- rpois(n = 5000, lambda = 20)
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(aes(y = ..density..),
bins=50,
color = 1,
fill = 'white') +
geom_density() +
theme_minimal()
set.seed(333)
library(ggplot2)
samples <- rnorm(n = 5000, mean = 20, sd = 3)
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(aes(y = ..density..),
bins=50,
color = 1,
fill = 'white') +
geom_density() +
theme_minimal()
samples
set.seed(333)
library(ggplot2)
samples <- rpois(n = 5000, lambda = 20)
sample_dataframe <- as.data.frame(samples)
ggplot(data = sample_dataframe,
aes(x = samples)
) +
geom_histogram(aes(y = ..density..),
bins=50,
color = 1,
fill = 'white') +
geom_density() +
theme_minimal()
samples
set.seed(101) #this makes the random draws be the same each time
sample1_informal <- rpois(n = 1, lambda = 8)   #1 draw from Poisson distribution with lambda = 55
sample1_formal <-  rpois(n = 1, lambda = 8+8) #1 draw from Poisson distribution with lambda = 45
print(mean(sample1_informal) - mean(sample1_formal))
sample1_informal
set.seed(101) #this makes the random draws be the same each time
sample1_informal <- rpois(n = 1, lambda = 55)   #1 draw from Poisson distribution with lambda = 55
sample1_formal <-  rpois(n = 1, lambda = 45) #1 draw from Poisson distribution with lambda = 45
print(mean(sample1_informal) - mean(sample1_formal))
sample1_informal
sample1_formal
set.seed(101) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(11) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(1111) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(1121) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(101) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(101) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(101) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(11) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 8
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 8+8
print(mean(sample2_informal) - mean(sample2_formal))
sample2_informal
sample2_formal
set.seed(101) #this makes the random draws be the same each time
sample3_informal <- rpois(n = 15, lambda = 55)   #15 draw from Poisson distribution with lambda = 8
sample3_formal <-  rpois(n = 15, lambda = 45) #15 draw from Poisson distribution with lambda = 8+8
print(mean(sample3_informal) - mean(sample3_formal))
set.seed(101) #this makes the random draws be the same each time
sample4_informal <- rpois(n = 40, lambda = 55)   #40 draw from Poisson distribution with lambda = 55
sample4_formal <-  rpois(n = 40, lambda = 45) #40 draw from Poisson distribution with lambda = 45
print(mean(sample4_informal) - mean(sample4_formal))
set.seed(101) #this makes the random draws be the same each time
sample5_informal <- rpois(n = 100, lambda = 55)   #100 draws from Poisson distribution with lambda = 55
sample5_formal <-  rpois(n = 100, lambda = 45) #100 draws from Poisson distribution with lambda = 45
print(mean(sample5_informal) - mean(sample5_formal))
set.seed(101) #this makes the random draws be the same each time
sample6_informal <- rpois(n = 1000, lambda = 55)   #1000 draws from Poisson distribution with lambda = 55
sample6_formal <-  rpois(n = 1000, lambda = 45) #1000 draws from Poisson distribution with lambda = 45
print(mean(sample6_informal) - mean(sample6_formal))
set.seed(101) #this makes the random draws be the same each time
sample1_informal <- rpois(n = 1, lambda = 55)   #1 draw from Poisson distribution with lambda = 55
sample1_formal <-  rpois(n = 1, lambda = 45) #1 draw from Poisson distribution with lambda = 45
set.seed(101) #this makes the random draws be the same each time
sample1_informal <- rpois(n = 1, lambda = 55)   #1 draw from Poisson distribution with lambda = 55
sample1_formal <-  rpois(n = 1, lambda = 45) #1 draw from Poisson distribution with lambda = 45
print(mean(sample1_informal) - mean(sample1_formal))
set.seed(11) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 55
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 45
set.seed(11) #this makes the random draws be the same each time
sample2_informal <- rpois(n = 5, lambda = 55)   #5 draw from Poisson distribution with lambda = 55
sample2_formal <-  rpois(n = 5, lambda = 45) #5 draw from Poisson distribution with lambda = 45
print(mean(sample2_informal) - mean(sample2_formal))
set.seed(101) #this makes the random draws be the same each time
sample3_informal <- rpois(n = 15, lambda = 55)   #15 draw from Poisson distribution with lambda = 55
sample3_formal <-  rpois(n = 15, lambda = 45) #15 draw from Poisson distribution with lambda = 45
print(mean(sample3_informal) - mean(sample3_formal))
set.seed(11) #this makes the random draws be the same each time
sample3_informal <- rpois(n = 15, lambda = 55)   #15 draw from Poisson distribution with lambda = 55
sample3_formal <-  rpois(n = 15, lambda = 45) #15 draw from Poisson distribution with lambda = 45
print(mean(sample3_informal) - mean(sample3_formal))
set.seed(191) #this makes the random draws be the same each time
sample3_informal <- rpois(n = 15, lambda = 55)   #15 draw from Poisson distribution with lambda = 55
sample3_formal <-  rpois(n = 15, lambda = 45) #15 draw from Poisson distribution with lambda = 45
print(mean(sample3_informal) - mean(sample3_formal))
set.seed(101) #this makes the random draws be the same each time
sample4_informal <- rpois(n = 40, lambda = 55)   #40 draw from Poisson distribution with lambda = 55
sample4_formal <-  rpois(n = 40, lambda = 45) #40 draw from Poisson distribution with lambda = 45
print(mean(sample4_informal) - mean(sample4_formal))
set.seed(101) #this makes the random draws be the same each time
sample5_informal <- rpois(n = 100, lambda = 55)   #100 draws from Poisson distribution with lambda = 55
sample5_formal <-  rpois(n = 100, lambda = 45) #100 draws from Poisson distribution with lambda = 45
print(mean(sample5_informal) - mean(sample5_formal))
set.seed(101) #this makes the random draws be the same each time
sample6_informal <- rpois(n = 1000, lambda = 55)   #1000 draws from Poisson distribution with lambda = 55
sample6_formal <-  rpois(n = 1000, lambda = 45) #1000 draws from Poisson distribution with lambda = 45
print(mean(sample6_informal) - mean(sample6_formal))
library(xaringanBuilder)
build_pdf("slides.Rmd")
build_pdf("slides.html")
install.packages("tm")
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 3
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 4
tolower(tokenized_first_par)
# Chunk 5
library(tidytext)
AP_corpus <- tidy(AssociatedPress)
install.packages( 'topicmodels')
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 3
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 4
tolower(tokenized_first_par)
# Chunk 5
library(tidytext)
AP_corpus <- tidy(AssociatedPress)
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
getwd
getwd()
setwd('../session08/')
getwd()
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 3
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 4
tolower(tokenized_first_par)
# Chunk 5
library(tidytext)
AP_corpus <- tidy(AssociatedPress)
data("AssociatedPress", package = "topicmodels")
install.packages('topicmodels')
install.packages('topicmodels')
data("AssociatedPress", package = "topicmodels")
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 3
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 4
tolower(tokenized_first_par)
# Chunk 5
library(tidytext)
AP_corpus <- tidy(AssociatedPress)
head(AP_corpus)
library(janeaustenr)
library(janeaustenr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(line = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
library(janeaustenr)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(line = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
xaringan:::inf_mr()
include_graphics('../session02/en-zipf.jpg')
warnings()
include_graphics('../session02/en-zipf.jpg')
getwd()
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point()
library(ggplot2)
freqs <- pois(100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point()
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point()
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() + theme(axis.title.x = element_blank())
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() + theme(axis.title.x = element_blank(),
axis.text.x = element_blank())
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() + theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() + theme(axis.text.y = element_blank(),
axis.text.x = element_blank()) +
xlab(Frequency of a word) + ylab(Meanings of the word) + theme_minimal(base_size=22)
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() + theme(axis.text.y = element_blank(),
axis.text.x = element_blank()) +
xlab('Frequency of a word') + ylab('Meanings of the word') + theme_minimal(base_size=22)
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() +     xlab('Frequency of a word') + ylab('Meanings of the word') + theme_minimal(base_size=22) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank())
xaringan:::inf_mr()
AP_corpus
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count))
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% arrange(asc(count))
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% arrange(desc(count))
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count))
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange((count))
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% head()
xaringan:::inf_mr()
a <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count))
nrow(a)
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% mutate(rank = 1:10473) %>% head()
AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% mutate(rank = seq(1:10473)) %>% head()
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count))
AP_ranked$rank <- seq(1:nrow(AP_ranked))
AP_ranked %>% head()
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count))
AP_ranked$rank <- seq(1:nrow(AP_ranked))
AP_ranked <- AP_ranked %>% mutate(log.count = log(count),
log.rank = log(rank))
AP_ranked %>% head()
ggplot(AP_ranked, aes(x = log.rank, y = log.count)) + geom_point()
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
tidy_books
tidy_books %>% select(word) %>% count(word)
tidy_books %>% select(word) %>% count(word) %>% arrange(n)
tidy_books
tidy_books %>% select(word) %>% count(word) %>% arrange(n)
tidy_books %>% select(word) %>% count(word) %>% arrange(desc(n))
tidy_books %>% select(word) %>% count(word) %>% arrange(desc(n)) %>% rename(count = n)
JA_ranked <- tidy_books %>% select(word) %>% count(word) %>% arrange(desc(n)) %>% rename(count = n) %>% mutate(length = nchar(word))
JA_ranked$rank <- seq(1:nrow(JA_ranked))
JA_ranked
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% mutate(length = nchar(word))
AP_ranked$rank <- seq(1:nrow(AP_ranked))
AP_ranked <- AP_ranked %>% mutate(log.count = log(count),
log.rank = log(rank))
AP_ranked %>% head()
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% ungroup() %>% mutate(length = nchar(word))
AP_ranked$rank <- seq(1:nrow(AP_ranked))
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% ungroup() %>% mutate(length = nchar(word))
AP_ranked <- AP_corpus %>% select(term, count) %>% group_by(term) %>% mutate(count = sum(count)) %>% unique() %>% arrange(desc(count)) %>% ungroup() %>% mutate(length = nchar(term))
AP_ranked$rank <- seq(1:nrow(AP_ranked))
AP_ranked <- AP_ranked %>% mutate(log.count = log(count),
log.rank = log(rank))
AP_ranked %>% head()
JA_ranked <- tidy_books %>% select(word) %>% count(word) %>% arrange(desc(n)) %>% rename(count = n) %>% mutate(length = nchar(word),
log.count = log(count))
JA_ranked$rank <- seq(1:nrow(JA_ranked))
JA_ranked <- JA_ranked %>% mutate(log.rank = log(rank))
JA_ranked
ggplot(AP_ranked, aes(x = length, y = count)) + geom_point(col='indianred') + theme_minimal(base_size = 22)
ggplot(AP_ranked, aes(x = length, y = log.count)) + geom_point(col='indianred') + theme_minimal(base_size = 22)
ggplot(AP_ranked, aes(x = length, y = log.freq)) + geom_point(col='indianred') + theme_minimal(base_size = 22)
ggplot(AP_ranked, aes(x = length, y = count)) + geom_point(col='indianred') + theme_minimal(base_size = 22)
JA_ranked <- tidy_books %>% select(word) %>% count(word) %>% arrange(desc(n)) %>% rename(count = n) %>% mutate(length = nchar(word),
log.count = log(count))
JA_ranked$rank <- seq(1:nrow(JA_ranked))
JA_ranked <- JA_ranked %>% mutate(log.rank = log(rank))
head(JA_ranked)
ggplot(JA_ranked, aes(x = length, y = count)) +  geom_point(col='indianred') + theme_minimal(base_size = 22)
ggplot(JA_ranked, aes(x = log.rank, y = log.count)) +  geom_point(col='indianred') + theme_minimal(base_size = 22)
JA_ranked
JA_ranked %>% filter(length == 1)
JA_ranked %>% filter(length == 1)
AP_ranked
AP_ranked %>% filter(length==1)
AP_ranked %>% filter(length==2)
AP_ranked %>% filter(length==3)
# Chunk 1: preamble
library(dplyr)
library(ggplot2)
# Chunk 2
library(knitr)
include_graphics('Zipf_30wiki_en_labels.png')
# Chunk 3
include_graphics('en-zipf.jpg')
# Chunk 4
library(ggplot2)
freqs <- seq(1:100)
meanings <- freqs**0.5
df <- data.frame(freq = freqs,
nmeanings = meanings)
ggplot(df, aes(x = freq, y = nmeanings)) + geom_point() +     xlab('Frecuencia') + ylab('Número de significados') + theme_minimal(base_size=22) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank())
# Chunk 5
library(tm)
library(knitr)
data("AssociatedPress", package = "topicmodels")
include_graphics('ap-story.png')
# Chunk 6
library(stringr)
first_par <- 'MEXICO CITY (AP) — The Mexican government said Tuesday that COVID-19 has passed from a pandemic to an endemic stage in Mexico, meaning authorities will treat it as a seasonally recurring disease.'
tokenized_first_par <- str_split(first_par, pattern = " ")[[1]]
tokenized_first_par
# Chunk 7
tolower(tokenized_first_par)
AssociatedPress
AP_corpus
library(tidytext)
AP_corpus <- tidy(AssociatedPress)
AP_corpus
?tidy
library(xaringanBuilder)
build_pdf('slides.html')
library(xaringanBuilder)
build_pdf('slides.Rmd')
xaringanBuilder::build_pdf('slides.rmd')
xaringanBuilder::build_pdf('slides.Rmd')
